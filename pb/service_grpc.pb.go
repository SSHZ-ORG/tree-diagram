// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TreeDiagramServiceClient is the client API for TreeDiagramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreeDiagramServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type treeDiagramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeDiagramServiceClient(cc grpc.ClientConnInterface) TreeDiagramServiceClient {
	return &treeDiagramServiceClient{cc}
}

func (c *treeDiagramServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/treediagram.pb.TreeDiagramService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeDiagramServiceServer is the server API for TreeDiagramService service.
// All implementations must embed UnimplementedTreeDiagramServiceServer
// for forward compatibility
type TreeDiagramServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	mustEmbedUnimplementedTreeDiagramServiceServer()
}

// UnimplementedTreeDiagramServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreeDiagramServiceServer struct {
}

func (UnimplementedTreeDiagramServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTreeDiagramServiceServer) mustEmbedUnimplementedTreeDiagramServiceServer() {}

// UnsafeTreeDiagramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreeDiagramServiceServer will
// result in compilation errors.
type UnsafeTreeDiagramServiceServer interface {
	mustEmbedUnimplementedTreeDiagramServiceServer()
}

func RegisterTreeDiagramServiceServer(s grpc.ServiceRegistrar, srv TreeDiagramServiceServer) {
	s.RegisterService(&TreeDiagramService_ServiceDesc, srv)
}

func _TreeDiagramService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeDiagramServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treediagram.pb.TreeDiagramService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeDiagramServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreeDiagramService_ServiceDesc is the grpc.ServiceDesc for TreeDiagramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreeDiagramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "treediagram.pb.TreeDiagramService",
	HandlerType: (*TreeDiagramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TreeDiagramService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
