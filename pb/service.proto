syntax = "proto2";
package treediagram.pb;

option go_package = "github.com/SSHZ-ORG/tree-diagram/pb";

import "google/protobuf/timestamp.proto";

// .google.type.Date: https://github.com/googleapis/googleapis/blob/master/google/type/date.proto
message Date {
    optional int32 year = 1;
    optional int32 month = 2;
    optional int32 day = 3;
}

message RenderEventRequest {
    optional string id = 1;
}

message RenderEventResponse {
    reserved 1;

    optional Date date = 5;

    message Snapshot {
        optional .google.protobuf.Timestamp timestamp = 1;
        optional int32 note_count = 2;

        repeated string added_actors = 3;
        repeated string removed_actors = 4;
    }
    repeated Snapshot snapshots = 2;

    message PlaceNoteCountStats {
        optional int32 total = 1;
        optional int32 rank = 2;
    }
    optional PlaceNoteCountStats place_stats_total = 3;
    optional PlaceNoteCountStats place_stats_finished = 4;
}

message RenderPlaceRequest {
    optional string id = 1;
}

message RenderPlaceResponse {
    optional int32 known_event_count = 1;
}

message RenderActorsRequest {
    repeated string id = 1;
}

message RenderActorsResponse {
    message ResponseItem {
        optional int32 known_event_count = 1;

        message Snapshot {
            reserved 1;

            optional Date date = 3;
            optional int32 favorite_count = 2;
        }
        repeated Snapshot snapshots = 2;
    }
    map<string, ResponseItem> items = 1;
}

message QueryEventsRequest {
    optional int32 offset = 1;

    message EventFilter {
        repeated string actor_ids = 1;
        optional string place_id = 2;
    }
    optional EventFilter filter = 4;
}

message QueryEventsResponse {
    message Event {
        reserved 3;

        optional string id = 1;
        optional string name = 2;
        optional Date date = 6;
        optional bool finished = 4;
        optional int32 last_note_count = 5;
    }
    repeated Event events = 1;
}

service TreeDiagramService {
    rpc RenderEvent (RenderEventRequest) returns (RenderEventResponse) {}
    rpc RenderPlace (RenderPlaceRequest) returns (RenderPlaceResponse) {}
    rpc RenderActors (RenderActorsRequest) returns (RenderActorsResponse) {}
    rpc QueryEvents (QueryEventsRequest) returns (QueryEventsResponse) {}
}
