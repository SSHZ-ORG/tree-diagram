// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file service.proto (package treediagram.pb, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2, Timestamp } from "@bufbuild/protobuf";

/**
 * .google.type.Date: https://github.com/googleapis/googleapis/blob/master/google/type/date.proto
 *
 * @generated from message treediagram.pb.Date
 */
export class Date extends Message<Date> {
  /**
   * @generated from field: optional int32 year = 1;
   */
  year?: number;

  /**
   * @generated from field: optional int32 month = 2;
   */
  month?: number;

  /**
   * @generated from field: optional int32 day = 3;
   */
  day?: number;

  constructor(data?: PartialMessage<Date>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.Date";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "year", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "month", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "day", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Date {
    return new Date().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJsonString(jsonString, options);
  }

  static equals(a: Date | PlainMessage<Date> | undefined, b: Date | PlainMessage<Date> | undefined): boolean {
    return proto2.util.equals(Date, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderEventRequest
 */
export class RenderEventRequest extends Message<RenderEventRequest> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  constructor(data?: PartialMessage<RenderEventRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderEventRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderEventRequest {
    return new RenderEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderEventRequest {
    return new RenderEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderEventRequest {
    return new RenderEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenderEventRequest | PlainMessage<RenderEventRequest> | undefined, b: RenderEventRequest | PlainMessage<RenderEventRequest> | undefined): boolean {
    return proto2.util.equals(RenderEventRequest, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderEventResponse
 */
export class RenderEventResponse extends Message<RenderEventResponse> {
  /**
   * @generated from field: optional treediagram.pb.Date date = 5;
   */
  date?: Date;

  /**
   * @generated from field: repeated treediagram.pb.RenderEventResponse.CompressedSnapshot compressed_snapshots = 6;
   */
  compressedSnapshots: RenderEventResponse_CompressedSnapshot[] = [];

  /**
   * @generated from field: optional treediagram.pb.RenderEventResponse.PlaceNoteCountStats place_stats_total = 3;
   */
  placeStatsTotal?: RenderEventResponse_PlaceNoteCountStats;

  /**
   * @generated from field: optional treediagram.pb.RenderEventResponse.PlaceNoteCountStats place_stats_finished = 4;
   */
  placeStatsFinished?: RenderEventResponse_PlaceNoteCountStats;

  constructor(data?: PartialMessage<RenderEventResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderEventResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 5, name: "date", kind: "message", T: Date, opt: true },
    { no: 6, name: "compressed_snapshots", kind: "message", T: RenderEventResponse_CompressedSnapshot, repeated: true },
    { no: 3, name: "place_stats_total", kind: "message", T: RenderEventResponse_PlaceNoteCountStats, opt: true },
    { no: 4, name: "place_stats_finished", kind: "message", T: RenderEventResponse_PlaceNoteCountStats, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderEventResponse {
    return new RenderEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderEventResponse {
    return new RenderEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderEventResponse {
    return new RenderEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenderEventResponse | PlainMessage<RenderEventResponse> | undefined, b: RenderEventResponse | PlainMessage<RenderEventResponse> | undefined): boolean {
    return proto2.util.equals(RenderEventResponse, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderEventResponse.ActorInfo
 */
export class RenderEventResponse_ActorInfo extends Message<RenderEventResponse_ActorInfo> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  constructor(data?: PartialMessage<RenderEventResponse_ActorInfo>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderEventResponse.ActorInfo";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderEventResponse_ActorInfo {
    return new RenderEventResponse_ActorInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderEventResponse_ActorInfo {
    return new RenderEventResponse_ActorInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderEventResponse_ActorInfo {
    return new RenderEventResponse_ActorInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RenderEventResponse_ActorInfo | PlainMessage<RenderEventResponse_ActorInfo> | undefined, b: RenderEventResponse_ActorInfo | PlainMessage<RenderEventResponse_ActorInfo> | undefined): boolean {
    return proto2.util.equals(RenderEventResponse_ActorInfo, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderEventResponse.CompressedSnapshot
 */
export class RenderEventResponse_CompressedSnapshot extends Message<RenderEventResponse_CompressedSnapshot> {
  /**
   * @generated from field: repeated google.protobuf.Timestamp timestamps = 1;
   */
  timestamps: Timestamp[] = [];

  /**
   * @generated from field: optional int32 note_count = 2;
   */
  noteCount?: number;

  /**
   * @generated from field: repeated treediagram.pb.RenderEventResponse.ActorInfo added_actors = 5;
   */
  addedActors: RenderEventResponse_ActorInfo[] = [];

  /**
   * @generated from field: repeated treediagram.pb.RenderEventResponse.ActorInfo removed_actors = 6;
   */
  removedActors: RenderEventResponse_ActorInfo[] = [];

  constructor(data?: PartialMessage<RenderEventResponse_CompressedSnapshot>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderEventResponse.CompressedSnapshot";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "timestamps", kind: "message", T: Timestamp, repeated: true },
    { no: 2, name: "note_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "added_actors", kind: "message", T: RenderEventResponse_ActorInfo, repeated: true },
    { no: 6, name: "removed_actors", kind: "message", T: RenderEventResponse_ActorInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderEventResponse_CompressedSnapshot {
    return new RenderEventResponse_CompressedSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderEventResponse_CompressedSnapshot {
    return new RenderEventResponse_CompressedSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderEventResponse_CompressedSnapshot {
    return new RenderEventResponse_CompressedSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: RenderEventResponse_CompressedSnapshot | PlainMessage<RenderEventResponse_CompressedSnapshot> | undefined, b: RenderEventResponse_CompressedSnapshot | PlainMessage<RenderEventResponse_CompressedSnapshot> | undefined): boolean {
    return proto2.util.equals(RenderEventResponse_CompressedSnapshot, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderEventResponse.PlaceNoteCountStats
 */
export class RenderEventResponse_PlaceNoteCountStats extends Message<RenderEventResponse_PlaceNoteCountStats> {
  /**
   * @generated from field: optional int32 total = 1;
   */
  total?: number;

  /**
   * @generated from field: optional int32 rank = 2;
   */
  rank?: number;

  constructor(data?: PartialMessage<RenderEventResponse_PlaceNoteCountStats>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderEventResponse.PlaceNoteCountStats";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "rank", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderEventResponse_PlaceNoteCountStats {
    return new RenderEventResponse_PlaceNoteCountStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderEventResponse_PlaceNoteCountStats {
    return new RenderEventResponse_PlaceNoteCountStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderEventResponse_PlaceNoteCountStats {
    return new RenderEventResponse_PlaceNoteCountStats().fromJsonString(jsonString, options);
  }

  static equals(a: RenderEventResponse_PlaceNoteCountStats | PlainMessage<RenderEventResponse_PlaceNoteCountStats> | undefined, b: RenderEventResponse_PlaceNoteCountStats | PlainMessage<RenderEventResponse_PlaceNoteCountStats> | undefined): boolean {
    return proto2.util.equals(RenderEventResponse_PlaceNoteCountStats, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderPlaceRequest
 */
export class RenderPlaceRequest extends Message<RenderPlaceRequest> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  constructor(data?: PartialMessage<RenderPlaceRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderPlaceRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderPlaceRequest {
    return new RenderPlaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderPlaceRequest {
    return new RenderPlaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderPlaceRequest {
    return new RenderPlaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenderPlaceRequest | PlainMessage<RenderPlaceRequest> | undefined, b: RenderPlaceRequest | PlainMessage<RenderPlaceRequest> | undefined): boolean {
    return proto2.util.equals(RenderPlaceRequest, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderPlaceResponse
 */
export class RenderPlaceResponse extends Message<RenderPlaceResponse> {
  /**
   * @generated from field: optional int32 known_event_count = 1;
   */
  knownEventCount?: number;

  constructor(data?: PartialMessage<RenderPlaceResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderPlaceResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "known_event_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderPlaceResponse {
    return new RenderPlaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderPlaceResponse {
    return new RenderPlaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderPlaceResponse {
    return new RenderPlaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenderPlaceResponse | PlainMessage<RenderPlaceResponse> | undefined, b: RenderPlaceResponse | PlainMessage<RenderPlaceResponse> | undefined): boolean {
    return proto2.util.equals(RenderPlaceResponse, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderActorsRequest
 */
export class RenderActorsRequest extends Message<RenderActorsRequest> {
  /**
   * @generated from field: repeated string id = 1;
   */
  id: string[] = [];

  constructor(data?: PartialMessage<RenderActorsRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderActorsRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderActorsRequest {
    return new RenderActorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderActorsRequest {
    return new RenderActorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderActorsRequest {
    return new RenderActorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenderActorsRequest | PlainMessage<RenderActorsRequest> | undefined, b: RenderActorsRequest | PlainMessage<RenderActorsRequest> | undefined): boolean {
    return proto2.util.equals(RenderActorsRequest, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderActorsResponse
 */
export class RenderActorsResponse extends Message<RenderActorsResponse> {
  /**
   * @generated from field: map<string, treediagram.pb.RenderActorsResponse.ResponseItem> items = 1;
   */
  items: { [key: string]: RenderActorsResponse_ResponseItem } = {};

  constructor(data?: PartialMessage<RenderActorsResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderActorsResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "items", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RenderActorsResponse_ResponseItem} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderActorsResponse {
    return new RenderActorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderActorsResponse {
    return new RenderActorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderActorsResponse {
    return new RenderActorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenderActorsResponse | PlainMessage<RenderActorsResponse> | undefined, b: RenderActorsResponse | PlainMessage<RenderActorsResponse> | undefined): boolean {
    return proto2.util.equals(RenderActorsResponse, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderActorsResponse.ResponseItem
 */
export class RenderActorsResponse_ResponseItem extends Message<RenderActorsResponse_ResponseItem> {
  /**
   * @generated from field: optional int32 known_event_count = 1;
   */
  knownEventCount?: number;

  /**
   * @generated from field: repeated treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot snapshots = 2;
   */
  snapshots: RenderActorsResponse_ResponseItem_Snapshot[] = [];

  constructor(data?: PartialMessage<RenderActorsResponse_ResponseItem>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderActorsResponse.ResponseItem";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "known_event_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "snapshots", kind: "message", T: RenderActorsResponse_ResponseItem_Snapshot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderActorsResponse_ResponseItem {
    return new RenderActorsResponse_ResponseItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderActorsResponse_ResponseItem {
    return new RenderActorsResponse_ResponseItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderActorsResponse_ResponseItem {
    return new RenderActorsResponse_ResponseItem().fromJsonString(jsonString, options);
  }

  static equals(a: RenderActorsResponse_ResponseItem | PlainMessage<RenderActorsResponse_ResponseItem> | undefined, b: RenderActorsResponse_ResponseItem | PlainMessage<RenderActorsResponse_ResponseItem> | undefined): boolean {
    return proto2.util.equals(RenderActorsResponse_ResponseItem, a, b);
  }
}

/**
 * @generated from message treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot
 */
export class RenderActorsResponse_ResponseItem_Snapshot extends Message<RenderActorsResponse_ResponseItem_Snapshot> {
  /**
   * @generated from field: optional treediagram.pb.Date date = 3;
   */
  date?: Date;

  /**
   * @generated from field: optional int32 favorite_count = 2;
   */
  favoriteCount?: number;

  constructor(data?: PartialMessage<RenderActorsResponse_ResponseItem_Snapshot>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 3, name: "date", kind: "message", T: Date, opt: true },
    { no: 2, name: "favorite_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderActorsResponse_ResponseItem_Snapshot {
    return new RenderActorsResponse_ResponseItem_Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderActorsResponse_ResponseItem_Snapshot {
    return new RenderActorsResponse_ResponseItem_Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderActorsResponse_ResponseItem_Snapshot {
    return new RenderActorsResponse_ResponseItem_Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: RenderActorsResponse_ResponseItem_Snapshot | PlainMessage<RenderActorsResponse_ResponseItem_Snapshot> | undefined, b: RenderActorsResponse_ResponseItem_Snapshot | PlainMessage<RenderActorsResponse_ResponseItem_Snapshot> | undefined): boolean {
    return proto2.util.equals(RenderActorsResponse_ResponseItem_Snapshot, a, b);
  }
}

/**
 * @generated from message treediagram.pb.QueryEventsRequest
 */
export class QueryEventsRequest extends Message<QueryEventsRequest> {
  /**
   * @generated from field: optional int32 offset = 1;
   */
  offset?: number;

  /**
   * @generated from field: optional int32 limit = 5;
   */
  limit?: number;

  /**
   * @generated from field: optional treediagram.pb.QueryEventsRequest.EventFilter filter = 4;
   */
  filter?: QueryEventsRequest_EventFilter;

  constructor(data?: PartialMessage<QueryEventsRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.QueryEventsRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "filter", kind: "message", T: QueryEventsRequest_EventFilter, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEventsRequest {
    return new QueryEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEventsRequest {
    return new QueryEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEventsRequest {
    return new QueryEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEventsRequest | PlainMessage<QueryEventsRequest> | undefined, b: QueryEventsRequest | PlainMessage<QueryEventsRequest> | undefined): boolean {
    return proto2.util.equals(QueryEventsRequest, a, b);
  }
}

/**
 * @generated from message treediagram.pb.QueryEventsRequest.EventFilter
 */
export class QueryEventsRequest_EventFilter extends Message<QueryEventsRequest_EventFilter> {
  /**
   * @generated from field: repeated string actor_ids = 1;
   */
  actorIds: string[] = [];

  /**
   * @generated from field: optional string place_id = 2;
   */
  placeId?: string;

  constructor(data?: PartialMessage<QueryEventsRequest_EventFilter>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.QueryEventsRequest.EventFilter";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "actor_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "place_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEventsRequest_EventFilter {
    return new QueryEventsRequest_EventFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEventsRequest_EventFilter {
    return new QueryEventsRequest_EventFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEventsRequest_EventFilter {
    return new QueryEventsRequest_EventFilter().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEventsRequest_EventFilter | PlainMessage<QueryEventsRequest_EventFilter> | undefined, b: QueryEventsRequest_EventFilter | PlainMessage<QueryEventsRequest_EventFilter> | undefined): boolean {
    return proto2.util.equals(QueryEventsRequest_EventFilter, a, b);
  }
}

/**
 * @generated from message treediagram.pb.QueryEventsResponse
 */
export class QueryEventsResponse extends Message<QueryEventsResponse> {
  /**
   * @generated from field: repeated treediagram.pb.QueryEventsResponse.Event events = 1;
   */
  events: QueryEventsResponse_Event[] = [];

  /**
   * @generated from field: optional bool has_next = 2;
   */
  hasNext?: boolean;

  constructor(data?: PartialMessage<QueryEventsResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.QueryEventsResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: QueryEventsResponse_Event, repeated: true },
    { no: 2, name: "has_next", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEventsResponse {
    return new QueryEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEventsResponse {
    return new QueryEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEventsResponse {
    return new QueryEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEventsResponse | PlainMessage<QueryEventsResponse> | undefined, b: QueryEventsResponse | PlainMessage<QueryEventsResponse> | undefined): boolean {
    return proto2.util.equals(QueryEventsResponse, a, b);
  }
}

/**
 * @generated from message treediagram.pb.QueryEventsResponse.Event
 */
export class QueryEventsResponse_Event extends Message<QueryEventsResponse_Event> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional treediagram.pb.Date date = 6;
   */
  date?: Date;

  /**
   * @generated from field: optional int32 last_note_count = 5;
   */
  lastNoteCount?: number;

  /**
   * @generated from field: optional int32 actor_count = 7;
   */
  actorCount?: number;

  constructor(data?: PartialMessage<QueryEventsResponse_Event>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "treediagram.pb.QueryEventsResponse.Event";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "date", kind: "message", T: Date, opt: true },
    { no: 5, name: "last_note_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "actor_count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEventsResponse_Event {
    return new QueryEventsResponse_Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEventsResponse_Event {
    return new QueryEventsResponse_Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEventsResponse_Event {
    return new QueryEventsResponse_Event().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEventsResponse_Event | PlainMessage<QueryEventsResponse_Event> | undefined, b: QueryEventsResponse_Event | PlainMessage<QueryEventsResponse_Event> | undefined): boolean {
    return proto2.util.equals(QueryEventsResponse_Event, a, b);
  }
}

