// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.treediagram.pb.Date', null, global);
goog.exportSymbol('proto.treediagram.pb.QueryEventsRequest', null, global);
goog.exportSymbol('proto.treediagram.pb.QueryEventsRequest.EventFilter', null, global);
goog.exportSymbol('proto.treediagram.pb.QueryEventsResponse', null, global);
goog.exportSymbol('proto.treediagram.pb.QueryEventsResponse.Event', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderActorsRequest', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderActorsResponse', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderActorsResponse.ResponseItem', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderEventRequest', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderEventResponse', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderEventResponse.CompressedSnapshot', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderPlaceRequest', null, global);
goog.exportSymbol('proto.treediagram.pb.RenderPlaceResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.Date.displayName = 'proto.treediagram.pb.Date';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.RenderEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderEventRequest.displayName = 'proto.treediagram.pb.RenderEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderEventResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treediagram.pb.RenderEventResponse.repeatedFields_, null);
};
goog.inherits(proto.treediagram.pb.RenderEventResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderEventResponse.displayName = 'proto.treediagram.pb.RenderEventResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.repeatedFields_, null);
};
goog.inherits(proto.treediagram.pb.RenderEventResponse.CompressedSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.displayName = 'proto.treediagram.pb.RenderEventResponse.CompressedSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.displayName = 'proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderPlaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.RenderPlaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderPlaceRequest.displayName = 'proto.treediagram.pb.RenderPlaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderPlaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.RenderPlaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderPlaceResponse.displayName = 'proto.treediagram.pb.RenderPlaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderActorsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treediagram.pb.RenderActorsRequest.repeatedFields_, null);
};
goog.inherits(proto.treediagram.pb.RenderActorsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderActorsRequest.displayName = 'proto.treediagram.pb.RenderActorsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderActorsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.RenderActorsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderActorsResponse.displayName = 'proto.treediagram.pb.RenderActorsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treediagram.pb.RenderActorsResponse.ResponseItem.repeatedFields_, null);
};
goog.inherits(proto.treediagram.pb.RenderActorsResponse.ResponseItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderActorsResponse.ResponseItem.displayName = 'proto.treediagram.pb.RenderActorsResponse.ResponseItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.displayName = 'proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.QueryEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.QueryEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.QueryEventsRequest.displayName = 'proto.treediagram.pb.QueryEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treediagram.pb.QueryEventsRequest.EventFilter.repeatedFields_, null);
};
goog.inherits(proto.treediagram.pb.QueryEventsRequest.EventFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.QueryEventsRequest.EventFilter.displayName = 'proto.treediagram.pb.QueryEventsRequest.EventFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.QueryEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.treediagram.pb.QueryEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.treediagram.pb.QueryEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.QueryEventsResponse.displayName = 'proto.treediagram.pb.QueryEventsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.treediagram.pb.QueryEventsResponse.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.treediagram.pb.QueryEventsResponse.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.treediagram.pb.QueryEventsResponse.Event.displayName = 'proto.treediagram.pb.QueryEventsResponse.Event';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    month: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    day: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.Date}
 */
proto.treediagram.pb.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.Date;
  return proto.treediagram.pb.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.Date}
 */
proto.treediagram.pb.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.treediagram.pb.Date.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.Date} returns this
 */
proto.treediagram.pb.Date.prototype.setYear = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.Date} returns this
 */
proto.treediagram.pb.Date.prototype.clearYear = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.Date.prototype.hasYear = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 month = 2;
 * @return {number}
 */
proto.treediagram.pb.Date.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.Date} returns this
 */
proto.treediagram.pb.Date.prototype.setMonth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.Date} returns this
 */
proto.treediagram.pb.Date.prototype.clearMonth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.Date.prototype.hasMonth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 day = 3;
 * @return {number}
 */
proto.treediagram.pb.Date.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.Date} returns this
 */
proto.treediagram.pb.Date.prototype.setDay = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.Date} returns this
 */
proto.treediagram.pb.Date.prototype.clearDay = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.Date.prototype.hasDay = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderEventRequest}
 */
proto.treediagram.pb.RenderEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderEventRequest;
  return proto.treediagram.pb.RenderEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderEventRequest}
 */
proto.treediagram.pb.RenderEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treediagram.pb.RenderEventRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treediagram.pb.RenderEventRequest} returns this
 */
proto.treediagram.pb.RenderEventRequest.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventRequest} returns this
 */
proto.treediagram.pb.RenderEventRequest.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treediagram.pb.RenderEventResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderEventResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderEventResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderEventResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && proto.treediagram.pb.Date.toObject(includeInstance, f),
    compressedSnapshotsList: jspb.Message.toObjectList(msg.getCompressedSnapshotsList(),
    proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.toObject, includeInstance),
    placeStatsTotal: (f = msg.getPlaceStatsTotal()) && proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.toObject(includeInstance, f),
    placeStatsFinished: (f = msg.getPlaceStatsFinished()) && proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderEventResponse}
 */
proto.treediagram.pb.RenderEventResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderEventResponse;
  return proto.treediagram.pb.RenderEventResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderEventResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderEventResponse}
 */
proto.treediagram.pb.RenderEventResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = new proto.treediagram.pb.Date;
      reader.readMessage(value,proto.treediagram.pb.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 6:
      var value = new proto.treediagram.pb.RenderEventResponse.CompressedSnapshot;
      reader.readMessage(value,proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.deserializeBinaryFromReader);
      msg.addCompressedSnapshots(value);
      break;
    case 3:
      var value = new proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats;
      reader.readMessage(value,proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.deserializeBinaryFromReader);
      msg.setPlaceStatsTotal(value);
      break;
    case 4:
      var value = new proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats;
      reader.readMessage(value,proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.deserializeBinaryFromReader);
      msg.setPlaceStatsFinished(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderEventResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderEventResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderEventResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.treediagram.pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getCompressedSnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getPlaceStatsTotal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.serializeBinaryToWriter
    );
  }
  f = message.getPlaceStatsFinished();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampsList: jspb.Message.toObjectList(msg.getTimestampsList(),
    google_protobuf_timestamp_pb.Timestamp.toObject, includeInstance),
    noteCount: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    addedActorsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    removedActorsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderEventResponse.CompressedSnapshot;
  return proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.addTimestamps(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoteCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddedActors(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRemovedActors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAddedActorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getRemovedActorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * repeated google.protobuf.Timestamp timestamps = 1;
 * @return {!Array<!proto.google.protobuf.Timestamp>}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.getTimestampsList = function() {
  return /** @type{!Array<!proto.google.protobuf.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {!Array<!proto.google.protobuf.Timestamp>} value
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
*/
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.setTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.google.protobuf.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.addTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.protobuf.Timestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * optional int32 note_count = 2;
 * @return {number}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.getNoteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.setNoteCount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.clearNoteCount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.hasNoteCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string added_actors = 3;
 * @return {!Array<string>}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.getAddedActorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.setAddedActorsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.addAddedActors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.clearAddedActorsList = function() {
  return this.setAddedActorsList([]);
};


/**
 * repeated string removed_actors = 4;
 * @return {!Array<string>}
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.getRemovedActorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.setRemovedActorsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.addRemovedActors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot} returns this
 */
proto.treediagram.pb.RenderEventResponse.CompressedSnapshot.prototype.clearRemovedActorsList = function() {
  return this.setRemovedActorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rank: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats;
  return proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 total = 1;
 * @return {number}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} returns this
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.setTotal = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} returns this
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.clearTotal = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 rank = 2;
 * @return {number}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} returns this
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.setRank = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} returns this
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.clearRank = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats.prototype.hasRank = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Date date = 5;
 * @return {?proto.treediagram.pb.Date}
 */
proto.treediagram.pb.RenderEventResponse.prototype.getDate = function() {
  return /** @type{?proto.treediagram.pb.Date} */ (
    jspb.Message.getWrapperField(this, proto.treediagram.pb.Date, 5));
};


/**
 * @param {?proto.treediagram.pb.Date|undefined} value
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
*/
proto.treediagram.pb.RenderEventResponse.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
 */
proto.treediagram.pb.RenderEventResponse.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventResponse.prototype.hasDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated CompressedSnapshot compressed_snapshots = 6;
 * @return {!Array<!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot>}
 */
proto.treediagram.pb.RenderEventResponse.prototype.getCompressedSnapshotsList = function() {
  return /** @type{!Array<!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treediagram.pb.RenderEventResponse.CompressedSnapshot, 6));
};


/**
 * @param {!Array<!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot>} value
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
*/
proto.treediagram.pb.RenderEventResponse.prototype.setCompressedSnapshotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.RenderEventResponse.CompressedSnapshot}
 */
proto.treediagram.pb.RenderEventResponse.prototype.addCompressedSnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.treediagram.pb.RenderEventResponse.CompressedSnapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
 */
proto.treediagram.pb.RenderEventResponse.prototype.clearCompressedSnapshotsList = function() {
  return this.setCompressedSnapshotsList([]);
};


/**
 * optional PlaceNoteCountStats place_stats_total = 3;
 * @return {?proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats}
 */
proto.treediagram.pb.RenderEventResponse.prototype.getPlaceStatsTotal = function() {
  return /** @type{?proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} */ (
    jspb.Message.getWrapperField(this, proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats, 3));
};


/**
 * @param {?proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats|undefined} value
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
*/
proto.treediagram.pb.RenderEventResponse.prototype.setPlaceStatsTotal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
 */
proto.treediagram.pb.RenderEventResponse.prototype.clearPlaceStatsTotal = function() {
  return this.setPlaceStatsTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventResponse.prototype.hasPlaceStatsTotal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlaceNoteCountStats place_stats_finished = 4;
 * @return {?proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats}
 */
proto.treediagram.pb.RenderEventResponse.prototype.getPlaceStatsFinished = function() {
  return /** @type{?proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats} */ (
    jspb.Message.getWrapperField(this, proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats, 4));
};


/**
 * @param {?proto.treediagram.pb.RenderEventResponse.PlaceNoteCountStats|undefined} value
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
*/
proto.treediagram.pb.RenderEventResponse.prototype.setPlaceStatsFinished = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treediagram.pb.RenderEventResponse} returns this
 */
proto.treediagram.pb.RenderEventResponse.prototype.clearPlaceStatsFinished = function() {
  return this.setPlaceStatsFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderEventResponse.prototype.hasPlaceStatsFinished = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderPlaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderPlaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderPlaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderPlaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderPlaceRequest}
 */
proto.treediagram.pb.RenderPlaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderPlaceRequest;
  return proto.treediagram.pb.RenderPlaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderPlaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderPlaceRequest}
 */
proto.treediagram.pb.RenderPlaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderPlaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderPlaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderPlaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderPlaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treediagram.pb.RenderPlaceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treediagram.pb.RenderPlaceRequest} returns this
 */
proto.treediagram.pb.RenderPlaceRequest.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderPlaceRequest} returns this
 */
proto.treediagram.pb.RenderPlaceRequest.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderPlaceRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderPlaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderPlaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderPlaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderPlaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownEventCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderPlaceResponse}
 */
proto.treediagram.pb.RenderPlaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderPlaceResponse;
  return proto.treediagram.pb.RenderPlaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderPlaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderPlaceResponse}
 */
proto.treediagram.pb.RenderPlaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKnownEventCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderPlaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderPlaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderPlaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderPlaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 known_event_count = 1;
 * @return {number}
 */
proto.treediagram.pb.RenderPlaceResponse.prototype.getKnownEventCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.RenderPlaceResponse} returns this
 */
proto.treediagram.pb.RenderPlaceResponse.prototype.setKnownEventCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderPlaceResponse} returns this
 */
proto.treediagram.pb.RenderPlaceResponse.prototype.clearKnownEventCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderPlaceResponse.prototype.hasKnownEventCount = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treediagram.pb.RenderActorsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderActorsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderActorsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderActorsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderActorsRequest}
 */
proto.treediagram.pb.RenderActorsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderActorsRequest;
  return proto.treediagram.pb.RenderActorsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderActorsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderActorsRequest}
 */
proto.treediagram.pb.RenderActorsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderActorsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderActorsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderActorsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string id = 1;
 * @return {!Array<string>}
 */
proto.treediagram.pb.RenderActorsRequest.prototype.getIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.treediagram.pb.RenderActorsRequest} returns this
 */
proto.treediagram.pb.RenderActorsRequest.prototype.setIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.RenderActorsRequest} returns this
 */
proto.treediagram.pb.RenderActorsRequest.prototype.addId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.RenderActorsRequest} returns this
 */
proto.treediagram.pb.RenderActorsRequest.prototype.clearIdList = function() {
  return this.setIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderActorsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderActorsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderActorsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, proto.treediagram.pb.RenderActorsResponse.ResponseItem.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderActorsResponse}
 */
proto.treediagram.pb.RenderActorsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderActorsResponse;
  return proto.treediagram.pb.RenderActorsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderActorsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderActorsResponse}
 */
proto.treediagram.pb.RenderActorsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.treediagram.pb.RenderActorsResponse.ResponseItem.deserializeBinaryFromReader, "", new proto.treediagram.pb.RenderActorsResponse.ResponseItem());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderActorsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderActorsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderActorsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.treediagram.pb.RenderActorsResponse.ResponseItem.serializeBinaryToWriter);
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderActorsResponse.ResponseItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownEventCount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    snapshotsList: jspb.Message.toObjectList(msg.getSnapshotsList(),
    proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderActorsResponse.ResponseItem;
  return proto.treediagram.pb.RenderActorsResponse.ResponseItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKnownEventCount(value);
      break;
    case 2:
      var value = new proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot;
      reader.readMessage(value,proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.deserializeBinaryFromReader);
      msg.addSnapshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderActorsResponse.ResponseItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && proto.treediagram.pb.Date.toObject(includeInstance, f),
    favoriteCount: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot;
  return proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.treediagram.pb.Date;
      reader.readMessage(value,proto.treediagram.pb.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFavoriteCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.treediagram.pb.Date.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Date date = 3;
 * @return {?proto.treediagram.pb.Date}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.getDate = function() {
  return /** @type{?proto.treediagram.pb.Date} */ (
    jspb.Message.getWrapperField(this, proto.treediagram.pb.Date, 3));
};


/**
 * @param {?proto.treediagram.pb.Date|undefined} value
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} returns this
*/
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} returns this
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.hasDate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 favorite_count = 2;
 * @return {number}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.getFavoriteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} returns this
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.setFavoriteCount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot} returns this
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.clearFavoriteCount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot.prototype.hasFavoriteCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 known_event_count = 1;
 * @return {number}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.getKnownEventCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} returns this
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.setKnownEventCount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} returns this
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.clearKnownEventCount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.hasKnownEventCount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Snapshot snapshots = 2;
 * @return {!Array<!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot>}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.getSnapshotsList = function() {
  return /** @type{!Array<!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot, 2));
};


/**
 * @param {!Array<!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot>} value
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} returns this
*/
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.setSnapshotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot}
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.addSnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.treediagram.pb.RenderActorsResponse.ResponseItem.Snapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.RenderActorsResponse.ResponseItem} returns this
 */
proto.treediagram.pb.RenderActorsResponse.ResponseItem.prototype.clearSnapshotsList = function() {
  return this.setSnapshotsList([]);
};


/**
 * map<string, ResponseItem> items = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.treediagram.pb.RenderActorsResponse.ResponseItem>}
 */
proto.treediagram.pb.RenderActorsResponse.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.treediagram.pb.RenderActorsResponse.ResponseItem>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.treediagram.pb.RenderActorsResponse.ResponseItem));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.treediagram.pb.RenderActorsResponse} returns this
 */
proto.treediagram.pb.RenderActorsResponse.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.QueryEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.QueryEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.QueryEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    filter: (f = msg.getFilter()) && proto.treediagram.pb.QueryEventsRequest.EventFilter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.QueryEventsRequest}
 */
proto.treediagram.pb.QueryEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.QueryEventsRequest;
  return proto.treediagram.pb.QueryEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.QueryEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.QueryEventsRequest}
 */
proto.treediagram.pb.QueryEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = new proto.treediagram.pb.QueryEventsRequest.EventFilter;
      reader.readMessage(value,proto.treediagram.pb.QueryEventsRequest.EventFilter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.QueryEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.QueryEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.QueryEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.treediagram.pb.QueryEventsRequest.EventFilter.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.QueryEventsRequest.EventFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.QueryEventsRequest.EventFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    actorIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    placeId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.QueryEventsRequest.EventFilter;
  return proto.treediagram.pb.QueryEventsRequest.EventFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.QueryEventsRequest.EventFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addActorIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.QueryEventsRequest.EventFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.QueryEventsRequest.EventFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string actor_ids = 1;
 * @return {!Array<string>}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.getActorIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter} returns this
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.setActorIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter} returns this
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.addActorIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter} returns this
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.clearActorIdsList = function() {
  return this.setActorIdsList([]);
};


/**
 * optional string place_id = 2;
 * @return {string}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.getPlaceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter} returns this
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.setPlaceId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsRequest.EventFilter} returns this
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.clearPlaceId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsRequest.EventFilter.prototype.hasPlaceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 offset = 1;
 * @return {number}
 */
proto.treediagram.pb.QueryEventsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.QueryEventsRequest} returns this
 */
proto.treediagram.pb.QueryEventsRequest.prototype.setOffset = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsRequest} returns this
 */
proto.treediagram.pb.QueryEventsRequest.prototype.clearOffset = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventFilter filter = 4;
 * @return {?proto.treediagram.pb.QueryEventsRequest.EventFilter}
 */
proto.treediagram.pb.QueryEventsRequest.prototype.getFilter = function() {
  return /** @type{?proto.treediagram.pb.QueryEventsRequest.EventFilter} */ (
    jspb.Message.getWrapperField(this, proto.treediagram.pb.QueryEventsRequest.EventFilter, 4));
};


/**
 * @param {?proto.treediagram.pb.QueryEventsRequest.EventFilter|undefined} value
 * @return {!proto.treediagram.pb.QueryEventsRequest} returns this
*/
proto.treediagram.pb.QueryEventsRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsRequest} returns this
 */
proto.treediagram.pb.QueryEventsRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.treediagram.pb.QueryEventsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.QueryEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.QueryEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.QueryEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.treediagram.pb.QueryEventsResponse.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.QueryEventsResponse}
 */
proto.treediagram.pb.QueryEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.QueryEventsResponse;
  return proto.treediagram.pb.QueryEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.QueryEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.QueryEventsResponse}
 */
proto.treediagram.pb.QueryEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.treediagram.pb.QueryEventsResponse.Event;
      reader.readMessage(value,proto.treediagram.pb.QueryEventsResponse.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.QueryEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.QueryEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.QueryEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.treediagram.pb.QueryEventsResponse.Event.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.treediagram.pb.QueryEventsResponse.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.treediagram.pb.QueryEventsResponse.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsResponse.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    date: (f = msg.getDate()) && proto.treediagram.pb.Date.toObject(includeInstance, f),
    finished: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    lastNoteCount: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event}
 */
proto.treediagram.pb.QueryEventsResponse.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.treediagram.pb.QueryEventsResponse.Event;
  return proto.treediagram.pb.QueryEventsResponse.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.treediagram.pb.QueryEventsResponse.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event}
 */
proto.treediagram.pb.QueryEventsResponse.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = new proto.treediagram.pb.Date;
      reader.readMessage(value,proto.treediagram.pb.Date.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinished(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastNoteCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.treediagram.pb.QueryEventsResponse.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.treediagram.pb.QueryEventsResponse.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.treediagram.pb.QueryEventsResponse.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.treediagram.pb.Date.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Date date = 6;
 * @return {?proto.treediagram.pb.Date}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.getDate = function() {
  return /** @type{?proto.treediagram.pb.Date} */ (
    jspb.Message.getWrapperField(this, proto.treediagram.pb.Date, 6));
};


/**
 * @param {?proto.treediagram.pb.Date|undefined} value
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
*/
proto.treediagram.pb.QueryEventsResponse.Event.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.hasDate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool finished = 4;
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.getFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.setFinished = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.clearFinished = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 last_note_count = 5;
 * @return {number}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.getLastNoteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.setLastNoteCount = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event} returns this
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.clearLastNoteCount = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.treediagram.pb.QueryEventsResponse.Event.prototype.hasLastNoteCount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.treediagram.pb.QueryEventsResponse.Event>}
 */
proto.treediagram.pb.QueryEventsResponse.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.treediagram.pb.QueryEventsResponse.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.treediagram.pb.QueryEventsResponse.Event, 1));
};


/**
 * @param {!Array<!proto.treediagram.pb.QueryEventsResponse.Event>} value
 * @return {!proto.treediagram.pb.QueryEventsResponse} returns this
*/
proto.treediagram.pb.QueryEventsResponse.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.treediagram.pb.QueryEventsResponse.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.treediagram.pb.QueryEventsResponse.Event}
 */
proto.treediagram.pb.QueryEventsResponse.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.treediagram.pb.QueryEventsResponse.Event, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.treediagram.pb.QueryEventsResponse} returns this
 */
proto.treediagram.pb.QueryEventsResponse.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};


goog.object.extend(exports, proto.treediagram.pb);
